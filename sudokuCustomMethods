#include "Header.h"
  
 sudokuCustom::sudokuCustom()
 {
     guessNum.resize(9);
     for (int i = 0; i < 9; i++)
         guessNum[i] = i + 1;
     random_shuffle(this->guessNum.begin(), this->guessNum.end(), genRandNum);
  
     GENmatrixSquare.resize(9);
     GENmatrixSquareTemp.resize(9);
     for (int i = 0; i < 9; i++)
     {
         GENmatrixSquare[i].resize(9);
         GENmatrixSquareTemp[i].resize(9);
         for (int j = 0; j < 9; j++)
         {
             GENmatrixSquare[i][j] = 0;
             GENmatrixSquareTemp[i][j] = 0;
         }
     }
  
     int x, y;
     system("CLS");
     PrintField(2);
     cout << "Ячейка: ";
     cin >> x >> y;
     system("CLS");
     while (x != 0 && y != 0)
     {
         PrintField(0, x-1, y-1);
         cout << "Число: ";
         int val;
         cin >> val;
         system("CLS");
         isIt(val, x, y, 1);
         PrintField(2);
         cout << "Ячейка: ";
         cin >> x >> y;
         system("CLS");
     }
     GENmatrixSquareFirst = GENmatrixSquare;
 }
  
 bool sudokuCustom::isPoss(int x, int y)
 {
     if (GENmatrixSquare[x][y] != 0)
         return false;
     else
         return true;
 }
  
 void sudokuCustom::PrintField(int need, int x, int y)
 {
     HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
     if (need == 1)
         cout << "0 0 для перехода в меню взаимодействия с полем и игрой\n\n";
     else if (need == 2)
         cout << "0 0 для окончания ввода\n\n";
     else
         cout << "\n\n";
     SetConsoleTextAttribute(handle, 5);
     cout << "  ";
     for (int i = 0; i < 9; i++)
     {
         if (i % 3 == 0 && i != 0)
             cout << " ";
         cout << i + 1 << " ";
     }
     SetConsoleTextAttribute(handle, 7);
     cout << "\n";
     for (int i = 0; i < 9; i++)
     {
         SetConsoleTextAttribute(handle, 5);
         cout << i + 1 << " ";
         SetConsoleTextAttribute(handle, 7);
         for (int j = 0; j < 9; j++)
         {
             if (j % 3 == 0 && j != 0)
                 cout << " ";
             if (GENmatrixSquare[i][j] == 0)
             {
                 if (x == i && y == j)
                 {
                     SetConsoleTextAttribute(handle, 11);
                     cout << "_" << " ";
                     SetConsoleTextAttribute(handle, 7);
                 }
                 else
                 {   
                     SetConsoleTextAttribute(handle, 8);
                     cout << "X" << " ";
                     SetConsoleTextAttribute(handle, 7);
                 }
             }
             else
                 cout << GENmatrixSquare[i][j] << " ";
         }
         if ((i + 1) % 3 == 0)
             cout << "\n";
         cout << "\n";
     }
 }
  
 bool sudokuCustom::GetHint()
 {
     random_device rd;
     mt19937 gen(rd());
     std::uniform_real_distribution<> distribution(0, 81);
  
     if (isone == false)
     {
         int count = 0;
         Solutions(count);
         if (count == 0)
         {
             return false;
         }
     }
     int x, y;
  
     int check = false;
     int begin = distribution(gen);
     for (int i = begin; i < 81; i++)
     {
         x = i / 9;
         y = i % 9;
         if (GENmatrixSquare[x][y] == 0)
         {
             GENmatrixSquare[x][y] = GENmatrixSquareTemp[x][y];
             return true;
         }
     }
     for (int i = begin; i >= 0; i--)
     {
         x = i / 9;
         y = i % 9;
         if (GENmatrixSquare[x][y] == 0)
         {
             GENmatrixSquare[x][y] = GENmatrixSquareTemp[x][y];
             return true;
         }
     }
 }
  
  
 void sudokuCustom::Solutions(int& count)
 {
     int r, c;
  
     if (!FindEmptyLocation(GENmatrixSquare, r, c))
     {
         for (int i = 0; i < 9; i++)
             for (int j = 0; j < 9; j++)
                 GENmatrixSquareTemp[i][j] = GENmatrixSquare[i][j];
         count++;
         return;
     }
  
     for (int i = 0; i < 9 && count < 2; i++)
     {
         if (isSafe(this->GENmatrixSquare, r, c, this->guessNum[i]))
         {
             this->GENmatrixSquare[r][c] = this->guessNum[i];
             Solutions(count);
         }
  
         this->GENmatrixSquare[r][c] = 0;
     }
 }
 int sudokuCustom::isValid()
 {
     int count = 0;
     Solutions(count);
     return count;
 }
  
 void sudokuCustom::GoBack()
 {
     if (Stages.size() == 0)
     {
         system("CLS");
         cout << "Пока не было ходов\n";
         return;
     }
     GENmatrixSquare[Stages.back()[0]][Stages.back()[1]] = 0;
     Stages.pop_back();
 }
  
 bool sudokuCustom::isIt(int value, int x, int y, bool need)
 {
     system("CLS");
  
     bool check = true;
     for (int i = 0; i < 9; i++)
     {
         if (i == (y - 1))
             continue;
         if (value == GENmatrixSquare[x - 1][i])
         {
             HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
             SetConsoleTextAttribute(handle, 4);
             cout << GENmatrixSquare[x - 1][i] << " повторяется в строке " <<
                 " (" << x << ":" << i + 1 << ")\n";
             SetConsoleTextAttribute(handle, 7);
             check = false;
             break;
         }
     }
     for (int i = 0; i < 9; i++)
     {
         if (i == (x - 1))
             continue;
         if (value == GENmatrixSquare[i][y - 1])
         {
             HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
             SetConsoleTextAttribute(handle, 4);
             cout << GENmatrixSquare[i][y - 1] << " повторяется в столбце " <<
                 " (" << i + 1 << ":" << y << ")\n";
             SetConsoleTextAttribute(handle, 7);
             check = false;
             break;
         }
     }
     int boxStartRow = (x - 1) - ((x - 1) % 3);
     int boxStartCol = (y - 1) - ((y - 1) % 3);
     for (int row = 0; row < 3; row++)
     {
         for (int col = 0; col < 3; col++)
         {
             if (GENmatrixSquare[row + boxStartRow][col + boxStartCol] == value)
             {
                 HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
                 SetConsoleTextAttribute(handle, 4);
                 cout << GENmatrixSquare[row + boxStartRow][col + boxStartCol] << " повторяется в квадрате " <<
                     " (" << row + boxStartRow + 1 << ":" << col + boxStartCol + 1 << ")\n";
                 SetConsoleTextAttribute(handle, 7);
                 check = false;
                 break;
             }
         }
     }
     if (check == true)
     {
         GENmatrixSquare[x - 1][y - 1] = value;
     }
     if (need == 0 && check == true)
         Stages.push_back({ x - 1, y - 1 });
     return check;
 }
  
 int sudokuCustom::DeleteCell(int x, int y)
 {
     if (GENmatrixSquareFirst[x][y] != 0)
         return 0;
     else if (GENmatrixSquare[x][y] == 0)
         return 1;
     else
     {
         for (int i = 0; i < Stages.size(); i++)
         {
             if (Stages[i][0] == x && Stages[i][1] == y)
             {
                 Stages.erase(Stages.begin() + i);
             }
         }
         GENmatrixSquare[x][y] = 0;
         return 2;
     }
 }
  
 bool sudokuCustom::isSolved()
 {
     int r, c;
  
     return !FindEmptyLocation(GENmatrixSquare, r, c);
 }
  
 void sudokuCustom::DevSolv()
 {
     GENmatrixSquare = GENmatrixSquareTemp;
 }
  
 int sudokuCustom::Solve2()
 {
     system("CLS");
     cout << "Идет подсчет количества решений...";
     int count = 0;
     Solutions(count);
     if (count == 1)
         isone = true;
     system("CLS");
     return count;
 }
